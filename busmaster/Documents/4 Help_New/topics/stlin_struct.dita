<?xml version='1.0' encoding='UTF-8'?>
<!-- This document was created with Syntext Serna Free. --><!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/topic.dtd" []>
<topic id="stcan_struct" xml:lang="en-us">
  <title>STLIN_MSG Structure</title>
  <prolog>
    <author>Ratnadip Choudhury</author>
    <copyright>
      <copyryear year="2011"/>
      <copyrholder>ROBERT BOSCH ENGINEERING AND BUSINESS SOLUTIONS LIMITED</copyrholder>
    </copyright>
    <metadata>
      <keywords>
        <indexterm>STLIN_MSG Structure</indexterm>
      </keywords>
    </metadata>
  </prolog>
  <body>
    <p>STLIN_MSG Structure Definition</p>
    <codeblock>struct sTLIN_MSG
{
    unsigned char m_ucMsgTyp;       // Header - 0, Slave Response - 1
    unsigned char m_ucChksumTyp;    // Checksum Type (0 - Classical / 1 - Enhanced)
    unsigned char m_ucDataLen;      // Data length (0..8)
    unsigned char m_ucMsgID;        // LIN Identifier
    
    union
    {
        UCHAR m_aucData[8];                 // Byte Data
        USHORT m_auwData[4];                // Word Data
        UINT m_aulData[2];                  // Long Data
    } m_sWhichBit;                          // Data access member
    unsigned long m_ulTimeStamp;
    unsigned char m_ucChannel;              // Channel Number 
    unsigned char m_ucCRC;                  // Checksum - Read Only

} STLIN_MSG;</codeblock>
    <p>Required Include header file is LINIncludes.h</p>
    <p><b>Input Parameters:</b></p>
    <p><b>m_ucMsgTyp</b></p>
    <p>0 - Sets message type as Header</p>
    <p>1 - Sets message type as Response</p>
    <p><b>m_ucChksumTyp</b></p>
    <p>0 - Sets checksum type as Classic</p>
    <p>1 - Sets checksum type as Enhanced</p>
    <p><b>m_ucDataLen</b></p>
    <p>dlc of the LIN message. Valid range of LIN data length is 0..8.</p>
    <p><b>m_ucMsgID</b></p>
    <p>LIN message identifier</p>
    <p><b>m_aucData</b>, <b>m_auwData, m_aulData</b></p>
    <p>Contains data bytes</p>
    <p><b>m_sWhichBit</b></p>
    <p>To access/update Data bytes</p>
    <p><b>m_ulTimeStamp</b></p>
    <p>Actual time stamp of the received message</p>
    <p><b>m_ucChannel</b></p>
    <p>Channel number</p>
    <p><b>m_ucCRC</b></p>
    <p>Checksum value of the received message</p>
    <p>STLIN_Msg Example:</p>
    <p><codeblock>STLIN_MSG sMsg;

sMsg.m_ucMsgTyp = 1; // Slave Response
sMsg.m_ucChksumTyp = 0; // Classic
sMsg.m_ucDataLen = 8;
sMsg.m_ucMsgID = 0x4;
sMsg.m_sWhichBit.m_aulData[0] = 10;  // Lower 4 Bytes
sMsg.m_sWhichBit.m_aulData[1] = 20;  // Upper 4 Bytes
sMsg.m_ucChannel = 1;

// Send the message
SendMsg(sMsg);</codeblock></p>
    <p><b>Event Structure:</b></p>
    <p>SEVENT_CHECKSUM_LIN Structure Definition</p>
    <p><codeblock>struct SEVENT_CHECKSUM_LIN
{
    unsigned char m_ucId;
    unsigned char m_ucCrc;
    unsigned char m_ucChannel;
    unsigned int  m_ulTime;
};</codeblock></p>
    <p>SEVENT_RECEIVE_LIN Structure Definition</p>
    <p><codeblock>struct SEVENT_RECEIVE_LIN
{
    unsigned int  m_ulTime;
};</codeblock></p>
    <p>SEVENT_SLAVE_NORESP_LIN Structure Definition</p>
    <p><codeblock>struct SEVENT_SLAVE_NORESP_LIN
{
    unsigned char m_ucId;
    unsigned char m_ucChannel;
    unsigned int  m_ulTime;

};</codeblock></p>
    <p>SEVENT_SYNC_LIN Structure Definition</p>
    <p><codeblock>typedef struct SEVENT_SYNC_LIN
{
    unsigned char m_ucChannel;
    unsigned int  m_ulTime;

};</codeblock></p>
    <p>Required Include header file is LINIncludes.h</p>
    <p/>
    <p>Accessing database message signal values</p>
    <p>Database message structures can be meaningfully interpreted. Database message structures will have signal members as defined in the database. Signal raw value can be directly assigned by using member of database message structure with the signal name.</p>
    <p>LIN_Request is a database message that has signals Sig1, Sig2 and Sig3. Each signal is 2 bytes of length. To assign raw value of a signal use message name structure and use signal name as member.</p>
    <p><codeblock>// Message Declaration
LIN_Request sMsgStruct = { 1, 0, 8, 0x4, { 0, 0, 0, 0, 0, 0, 0, 0 } };

// Use signal member

// Sig1
sMsgStruct.m_sWhichBit.Sig_1 = 10;

// Sig2
sMsgStruct.m_sWhichBit.Sig_2 = 20;

// Sig3
sMsgStruct.m_sWhichBit.Sig_3 = 30;

// Send the message now
SendMsg(*((STLIN_MSG *)&amp;sMsg));</codeblock></p>
    <p>Right click on edit area of function editor. Select &quot;Insert Message&quot; or &quot;Insert Signal&quot; option to insert message structure or signal structure. Select the option &quot;Yes, I want to declare selected message structure variable&quot; option in the &quot;Message and Signal List&quot; to initialise message with its struct definition.</p>
    <p>Required Include header file Unions.h</p>
    <p><b>Note:</b></p>
    <p><ul>
        <li>Unions.h file will be automatically generated by BUSMASTER during database import.</li>
        <li>This file will be in the database file directory</li>
      </ul></p>
  </body>
</topic>
